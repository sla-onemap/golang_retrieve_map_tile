/**************
A sample GO application to
retrieve One Map 2.0 
tile based on lat/lng

By Kai
One Map 2.0 Dev Team

Calculations are based on 
http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames

Map Tile is being generated by 
Singapore Land Authority
***************/
package main

//Imports necessary libraries
import (
	"github.com/jessevdk/go-flags"
	"io"
	"os"
	"math"
	"fmt"
	"net/http"
	"strings"
	"strconv"
)

//Generate respective tile based on zoom and latlng
func main() {
	//Struct for various options
	var opts struct {
	    //Automatic marshalling of command line parameters
	    Latlng 	string `short:"l" description:"Latitude and Longitude(lat,lng) of particular tile (Eg. 1.3,103.8)" value-name:"latitude,longitude"`
	    Zoom    int    `short:"z" description:"Zoom factor" value-name:"ZOOMLEVEL"`
	}

	//Parser for command-line inputs
	parser := flags.NewParser(&opts, flags.HelpFlag|flags.PassDoubleDash)

	_, err := parser.Parse()

	//Gives appropriate help message 
	if parser.FindOptionByLongName("help").IsSet() {
		parser.WriteHelp(os.Stdout)
		os.Exit(0)
	}

	zoom := opts.Zoom

	//Split String
	s := strings.Split(opts.Latlng, ",")
    lat, lng := s[0], s[1]

	latfloat, err := strconv.ParseFloat(lat, 64)
	//Exit if faced with unknown error(s)
	if err != nil {
		os.Exit(0)
		return
	}

	lngfloat, err := strconv.ParseFloat(lng, 64)
	//Exit if faced with unknown error(s)
	if err != nil {
		os.Exit(0)
		return
	}

	//Mathematical calculation to get the correct XY Tile based on XYZ
	x := int(math.Floor((lngfloat + 180.0) / 360.0 * (math.Exp2(float64(zoom)))))
	y := int(math.Floor((1.0 - math.Log(math.Tan(latfloat*math.Pi/180.0)+1.0/math.Cos(latfloat*math.Pi/180.0))/math.Pi) / 2.0 * (math.Exp2(float64(zoom)))))

	//URL to One Map 2.0
	onemapurl := "http://maps-a.onemap.sg/v2/Default/"+strconv.Itoa(zoom)+"/"+strconv.Itoa(x)+"/"+strconv.Itoa(y)+".png"

    img, _ := os.Create("tile.png")
    defer img.Close()

    resp, _ := http.Get(onemapurl)
    defer resp.Body.Close()
    fmt.Println(onemapurl)

    size, err := io.Copy(img, resp.Body)

    if err != nil {
        os.Exit(0)
        return
    }

    fmt.Println("File size: ", size)
    fmt.Println("Your tile image was retrieved for One Map 2.0!")

}



